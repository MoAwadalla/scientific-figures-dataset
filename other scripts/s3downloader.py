import os
import concurrent.futures
import boto3
from botocore.exceptions import NoCredentialsError

# Create an S3 client
session = boto3.session.Session(
    aws_access_key_id='AKIAXCQRMGSVKZCZALFH',
    aws_secret_access_key='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'
)
s3_client = session.client('s3')
bucket_name = 'arxiv'
prefix = 'src/'

def download_file(key):
    """
    Download a file from the S3 bucket.
    """
    try:
        # The key will already include the prefix (e.g., 'src/arXiv_src_1001_001.tar')
        file_name = os.path.basename(key)
        dest_path = os.path.join('/s3raw', file_name)

        print(f"Downloading {key}...")
        # Specify RequestPayer when accessing a Requester Pays bucket
        s3_client.download_file(bucket_name, key, dest_path, ExtraArgs={'RequestPayer': 'requester'})
        print(f"Downloaded {file_name} to {dest_path}")
    except NoCredentialsError:
        print("Credentials not available")
    except Exception as e:
        print(e)

def main():
    try:
        # List all objects within the src/ prefix
        paginator = s3_client.get_paginator('list_objects_v2')
        # Specify RequestPayer when accessing a Requester Pays bucket
        page_iterator = paginator.paginate(Bucket=bucket_name, Prefix=prefix, RequestPayer='requester')

        # Use a thread pool to download files in parallel
        # with concurrent.futures.ThreadPoolExecutor(max_workers=os.cpu_count()) as executor:
        #     # Flatten list of lists generated by pages
        #     object_keys = [
        #         content['Key']
        #         for page in page_iterator
        #         for content in page.get('Contents', [])
        #     ]

        #     # Download all files in parallel
        #     executor.map(download_file, object_keys)

        object_keys = [
                content['Key']
                for page in page_iterator
                for content in page.get('Contents', [])
            ]
        download_file(object_keys[0])

    except NoCredentialsError:
        print("Credentials not available")
    except Exception as e:
        print(e)

if __name__ == '__main__':
    main()